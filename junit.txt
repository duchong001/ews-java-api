@Configuration
@ConfigurationProperties(prefix = "es.constant")
public class ElasticSearchConfig {

    @Value("${es.constant.host}")
    private String host;
    @Value("${es.constant.schema}")
    private String schema;
    @Value("${es.constant.connTimeout}")
    private int connTimeout;
    @Value("${es.constant.socketTimeout}")
    private int socketTimeout;
    @Value("${es.constant.connRequestTimeout}")
    private int connRequestTimeout;
    @Value("${es.constant.username}")
    private String username;
    @Value("${es.constant.password}")
    private String password;
    @Value("${es.constant.maxConnectNum}")
    private int maxConnectNum;
    @Value("${es.constant.maxConnectPerRoute}")
    private int maxConnectPerRoute;


    @Bean
    public RestHighLevelClient restHighLevelClient() {

        List<HttpHost> hostLists = new ArrayList<>();

        String[] hostList = host.split(",");
        for (String addr : hostList) {
            String ip = addr.split(":")[0];
            String port = addr.split(":")[1];
            hostLists.add(new HttpHost(ip, Integer.parseInt(port), schema));
        }

        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));

        // 转换成 HttpHost 数组
        HttpHost[] httpHost = hostLists.toArray(new HttpHost[]{});
        // 构建连接对象
        RestClientBuilder builder = RestClient.builder(httpHost);
        // 连接延时配置
        builder.setRequestConfigCallback(requestConfigBuilder -> {
            requestConfigBuilder.setConnectTimeout(connTimeout);
            requestConfigBuilder.setSocketTimeout(socketTimeout);
            requestConfigBuilder.setConnectionRequestTimeout(connRequestTimeout);
            return requestConfigBuilder;
        });
        builder.setHttpClientConfigCallback(httpClientBuilder -> {
            httpClientBuilder.setMaxConnTotal(maxConnectNum);
            httpClientBuilder.setMaxConnPerRoute(maxConnectPerRoute);
            return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
        });
        return new RestHighLevelClient(builder);
    }


    //RestHighLevelClient client = new RestHighLevelClient(
    //        RestClient.builder(
    //                new HttpHost(host, port, "http")));
    //return client;
}



//

@Service
public class ElasticSearchServiceImpl implements ElasticSearchService {
    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSearchServiceImpl.class);

    @Autowired
    private final RestHighLevelClient client;

    public ElasticSearchServiceImpl(RestHighLevelClient client) {
        this.client = client;
    }

    /**
     * 创建索引
     *
     * @param index 必须小写,格式参考文档，否则报错：Elasticsearch exception [type=invalid_index_name_exception, reason=Invalid index name [OK], must be lowercase]
     * @return 是否创建成功
     */
    @Override
    public boolean createIndex(String index) {
        CreateIndexResponse response;
        try {
            if (!this.existsIndex(index)) {
                response = client.indices().create(new CreateIndexRequest(index), RequestOptions.DEFAULT);
            } else {
                return true;
            }
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 创建索引异常：{}", e.getMessage());
            return false;
        }
        return response.isAcknowledged();
    }

    /**
     * 判断索引是否存在
     *
     * @param index
     * @return
     */
    private boolean existsIndex(String index) throws IOException {
        return client.indices().exists(new GetIndexRequest(index), RequestOptions.DEFAULT);
    }

    /**
     * 删除索引
     *
     * @param index 必须小写,格式参考文档，否则：找不到大写索引名
     * @return 是否删除成功
     */
    @Override
    public boolean deleteIndex(String index) {
        AcknowledgedResponse response = null;
        try {
            if (this.existsIndex(index)) {
                response = client.indices().delete(new DeleteIndexRequest(index), RequestOptions.DEFAULT);
            } else {
                return true; //索引不存在
            }
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 删除索引异常：{}", e.getMessage());
            return false;
        }
        return response.isAcknowledged();
    }

    /**
     * 创建文档
     * id相同则更新、不同则创建,数据格式（字段）不同则空,字段为追加模式
     *
     * @param index    索引
     * @param data     数据
     * @param dataType 格式类型    例:XContentType.JSON
     * @param id       唯一标识   put /index/1
     * @return
     */
    @Override
    public int insertDocument(String index, Object data, XContentType dataType, String id) {
        IndexRequest request = new IndexRequest(index);
        request.id(id);
        String dataString = JSONObject.toJSONString(data);
        request.source(dataString, dataType);
        IndexResponse response = null;
        try {
            response = client.index(request, RequestOptions.DEFAULT);
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 创建文档异常：{}", e.getMessage());
        }
        return response != null ? response.status().getStatus() : 400;
    }

    @Override
    public String save(EsExceptionEntity entity) {

        String id = IdUtil.randomUUID();
        LOGGER.info("===ES===index==={}===id==={}", Constants.EX_INDEX_NAME, id);
        entity.setId(id);
        IndexRequest request = new IndexRequest(Constants.EX_INDEX_NAME);
        request.id(id);
        String dataString = JSONObject.toJSONString(entity);
        request.source(dataString, XContentType.JSON);
        IndexResponse response = null;
        try {
            response = client.index(request, RequestOptions.DEFAULT);
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 创建文档异常：{}", e.getMessage());
        }
        return response != null ? response.getId() : "-1";
    }

    /**
     * 获取文档
     *
     * @param index
     * @param id
     * @param mappingClass
     * @param <T>
     * @return
     */
    @Override
    public <T> T getDocument(String index, String id, Class<T> mappingClass) {
        GetResponse getResponse = null;
        try {
            if (this.existsIndex(index)) {
                GetRequest getRequest = new GetRequest(index, id);
                getResponse = client.get(getRequest, RequestOptions.DEFAULT);
                String sourceAsString = getResponse.getSourceAsString();

                if (sourceAsString == null || sourceAsString.isEmpty()) {
                    return null;
                }
                /**Jackson日期时间序列化问题：
                 * Cannot construct instance of `java.time.LocalDateTime`
                 * (no Creators, like default constructor, exist): no String-argument constructor/factory method to
                 * deserialize from String value ('2020-06-04 15:07:54')
                 */
//                ObjectMapper objectMapper = new ObjectMapper();
//                objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
//                objectMapper.registerModule(new JavaTimeModule());
//                T result = objectMapper.readValue(sourceAsString, mappingClass);
                T result = JSON.parseObject(sourceAsString, mappingClass);
                return result;
            }
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 获取文档异常：{}", e.getMessage());
        }
        return null;
    }

    /**
     * 更新文档信息
     *
     * @param index
     * @param data
     * @param dataType
     * @param id
     * @return
     */
    @Override
    public int updateDocument(String index, Object data, XContentType dataType, String id) {
        UpdateResponse updateResponse = null;
        try {
            if (this.existsIndex(index)) {
                UpdateRequest updateRequest = new UpdateRequest(index, id);
                String dataString = JSONObject.toJSONString(data);
                updateRequest.doc(dataString, dataType);
                updateResponse = client.update(updateRequest, RequestOptions.DEFAULT);
            }
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 更新文档异常：{}", e.getMessage());
        }
        return updateResponse != null ? updateResponse.status().getStatus() : 400;
    }

    /**
     * 删除文档
     *
     * @param index
     * @param id
     * @return
     */
    @Override
    public int deleteDocument(String index, String id) {
        DeleteResponse deleteResponse = null;
        try {
            if (this.existsIndex(index)) {
                DeleteRequest deleteRequest = new DeleteRequest(index, id);
                deleteResponse = client.delete(deleteRequest, RequestOptions.DEFAULT);
            }
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 删除文档异常：{}", e.getMessage());
        }
        return deleteResponse != null ? deleteResponse.status().getStatus() : 400;
    }

    /**
     * 批量操作文档信息
     * 备注:暂局限入参list,可扩展其他<?>
     *
     * @param index
     * @param list     标识相同则覆盖,否则新增
     * @param dataType
     * @return
     */
    @Override
    public boolean batchInsertDocument(String index, List<?> list, XContentType dataType) {
        BulkRequest bulkRequest = new BulkRequest();
        for (Object obj : list) {
            // 自动生成id
            bulkRequest.add(new IndexRequest(index).source(JSON.toJSONString(obj), dataType));
        }
        BulkResponse bulk = null;
        try {
            bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);
        } catch (Exception e) {
            LOGGER.error("ElasticSearch批量操作文档信息异常：{}", e.getMessage());
        }
        return bulk != null && !bulk.hasFailures();
    }

    /**
     * 查询数据
     * 备注：可拓展深入精准查询、范围查询、模糊查询、匹配所有等
     *
     * @param index
     * @return
     */
    @Override
    public List<Map<String, Object>> searchDocument(String index) {
        SearchRequest searchRequest = new SearchRequest(index);
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();

        MatchAllQueryBuilder termQueryBuilder = QueryBuilders.matchAllQuery();
        sourceBuilder.query(termQueryBuilder);
        // sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));
        searchRequest.source(sourceBuilder);
        SearchResponse search;
        try {
            search = client.search(searchRequest, RequestOptions.DEFAULT);
        } catch (Exception e) {
            LOGGER.error("ElasticSearch 查询数据异常：{}", e.getMessage());
            return null;
        }
        List<Map<String, Object>> mapList = new ArrayList<>();
        SearchHits searchHits = search.getHits();
        if (Objects.nonNull(searchHits)) {
            for (SearchHit hit : searchHits.getHits()) {
                mapList.add(hit.getSourceAsMap());
            }
        }
        return mapList;
    }

    @Override
    public List<Map<String, Object>> searchDocument(EsExceptionQueryRequest esExceptionQueryRequest) {

        SearchRequest searchRequest = new SearchRequest(Constants.EX_INDEX_NAME);
        Integer pageNum = esExceptionQueryRequest.getPageNum();
        Integer pageSize = esExceptionQueryRequest.getPageSize();
        String startTime = esExceptionQueryRequest.getStartTime();
        String endTime = esExceptionQueryRequest.getEndTime();
        String emailAddress = esExceptionQueryRequest.getEmailAddress();
        String ewsEventType = esExceptionQueryRequest.getEwsEventType();
        String exceptionStatus = esExceptionQueryRequest.getExceptionStatus();
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();

        if (StringUtils.isNotBlank(startTime)) {
            boolQueryBuilder.must(QueryBuilders.rangeQuery("createTime").from(startTime));
        }
        if (StringUtils.isNotBlank(endTime)) {
            boolQueryBuilder.must(QueryBuilders.rangeQuery("createTime").to(endTime));
        }
        if (StringUtils.isNotBlank(ewsEventType)) {
            boolQueryBuilder.must(QueryBuilders.termsQuery("ewsEventType", ewsEventType, ewsEventType.toLowerCase()));
        }
        if (StringUtils.isNotBlank(exceptionStatus)) {
            boolQueryBuilder.must(QueryBuilders.termQuery("exceptionStatus", exceptionStatus));
        }
        if (StringUtils.isNotBlank(emailAddress)) {
            boolQueryBuilder.must(QueryBuilders.termQuery("emailAddress", emailAddress));
        }
        //SortBuilder sortBuilder = SortBuilders.fieldSort("createTime.keyword")
        //        .order(SortOrder.DESC);
        //sourceBuilder.sort(sortBuilder);
        sourceBuilder.query(boolQueryBuilder);
        sourceBuilder.from(null == pageNum ? 1 : pageNum);
        sourceBuilder.size(null == pageSize ? 10 : pageSize);
        sourceBuilder.timeout(new TimeValue(10000));
        sourceBuilder.sort("createTime.keyword", (SortOrder.DESC));
        searchRequest.source(sourceBuilder);

        SearchResponse searchResponse;
        try {
            searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);
        } catch (IOException e) {
            LOGGER.error("===查询es报错==={}", e);
            return null;
        }
        List<Map<String, Object>> resultList = Lists.newArrayList();
        SearchHits searchHits = searchResponse.getHits();
        if (Objects.nonNull(searchHits)) {
            for (SearchHit hit : searchHits.getHits()) {
                resultList.add(hit.getSourceAsMap());
            }
        }
        return resultList;
    }

    private void close(RestHighLevelClient client) {
        try {
            client.close();
        } catch (IOException e) {
            LOGGER.error("ElasticSearch 关闭异常：{}", e.getMessage());
        }
    }
}
sonarqube:7.8-community 是 sonar 对 jdk1.8 的最后一个版本，从 7.9 以后 sonar 最低支持版本为 jdk 1.11

单元测试
https://www.cnblogs.com/xuyatao/p/8337087.html
https://shanhy.blog.csdn.net/article/details/104395281
https://zhuanlan.zhihu.com/p/43360749
#下载地址：
https://www.sonarqube.org/downloads/
https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-5.3.zip
https://github.com/xuhuisheng/sonar-l10n-zh/releases?page=4
安装
https://my.oschina.net/milletes/blog/761742


#settings文件配置

<pluginGroups>
	<!-- SonarQube 插件 -->
	<pluginGroup>org.sonarsource.scanner.maven</pluginGroup>
  </pluginGroups>
# 若报错则 注释掉
pom里面加
 <plugin>
	<groupId>org.sonarsource.scanner.maven</groupId>
	<artifactId>sonar-maven-plugin</artifactId>
	<version>3.3.0.603</version>
</plugin>
  <profiles>
	<!-- SonarQube 插件 -->
	<profile>
		<id>sonar</id>
		<activation>
			<activeByDefault>true</activeByDefault>
		</activation>
		<properties>
			<!-- Optional URL to server. Default value is http://localhost:9000 -->
			<sonar.host.url>
			  http://192.168.10.88:9000
			</sonar.host.url>
		</properties>
	</profile>
  </profiles>

# 该命令所经历阶段顺序：清理、设置jacoco代理、打包、执行测试用例、生成jacoco报告、推送报告到sonarqube

mvn clean package
mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package org.jacoco:jacoco-maven-plugin:report sonar:sonar

# 参考demo写法

package com.example.controller;

import com.example.entity.User;
import com.example.execute.UserExe;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.web.context.WebApplicationContext;

import java.util.List;
import java.util.Objects;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

/**
 * @author DUCHONG
 * @date 2022-03-25 20:45
 **/
@RunWith(SpringRunner.class)
@SpringBootTest
public class UserControllerTest {

    /**
     * 方式一，通过注入service
     */
    @Autowired
    private UserExe userExe;

    /**
     * 测试接口不需要service
     */
    private MockMvc mockMvc;

    @Autowired
    private WebApplicationContext context;

    private ObjectMapper mapper = new ObjectMapper();


    User user;

    @Before
    public void setUp() {

        user=new User(2L,"sss",20,"1427222829@qq.com");
        mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
    }

    @Test
    @Transactional
    public void testGetUser(){

        User user = userExe.getUser(1L);

        Assert.assertTrue("error", Objects.nonNull(user));

    }

    @Test
    public void testMockGetUser() throws Exception {

        String responseString = mockMvc.perform(MockMvcRequestBuilders.get("/user/get")
                .contentType(MediaType.APPLICATION_FORM_URLENCODED)  //数据的格式
                .param("id","1L")
        )
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andDo(print())
                .andReturn()
                .getResponse()
                .getContentAsString();
        System.out.println("--------返回的json = " + responseString);

        mockMvc.perform(MockMvcRequestBuilders.get("/user/get").param("id","1L"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andDo(print());
//        ObjectMapper mapper = new ObjectMapper();
//        ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
//        java.lang.String requestJson = ow.writeValueAsString(softInfo);
//        String responseString = mockMvc.perform( post("/softs").contentType(MediaType.APPLICATION_JSON).content(requestJson)).andDo(print())
//                .andExpect(status().isOk()).andReturn().getResponse().getContentAsString();
//。。。设置值
//    String requestJson = JSONObject.toJSONString(folderInfo);
//        String responseString = mockMvc.perform( post("/softs").contentType(MediaType.APPLICATION_JSON).content(requestJson)).andDo(print())
//                .andExpect(status().isOk()).andReturn().getResponse().getContentAsString();
    }
    @Test
    public void testGetUserList(){

        String userName="aaa";

        List userList = userExe.getUserList(userName);

        Assert.assertTrue("error", !CollectionUtils.isEmpty(userList));
    }
}

